import Mathlib

open CategoryTheory Set Topology Opposite Quiver Hom

universe u

@[ext]
structure Opens (X : Type u) [TopologicalSpace X] where
  carrier : Set X
  isOpen : IsOpen carrier

-- Note: this single instance gives `Opens X` access to a Mem instance, a Preorder instance, and a SmallCategory instance
instance (X : Type u) [TopologicalSpace X] : SetLike (Opens X) X where
  coe := Opens.carrier
  coe_injective' := Œª _ _ ‚Ü¶ Opens.ext

instance (X : Type u) [TopologicalSpace X] : Inf (Opens X) := ‚ü®Œª U V ‚Ü¶ ‚ü®U.carrier ‚à© V.carrier, IsOpen.inter U.2 V.2‚ü©‚ü©

lemma inf_carrier_def (X : Type u) [TopologicalSpace X] {U V : Opens X} : (U ‚äì V).carrier = U.carrier ‚à© V.carrier := rfl

instance (X : Type u) [TopologicalSpace X] : Sup (Opens X) := ‚ü®Œª U V ‚Ü¶ ‚ü®U.carrier ‚à™ V.carrier, IsOpen.union U.2 V.2‚ü©‚ü©

instance (X : Type u) [TopologicalSpace X] : SupSet (Opens X) := ‚ü®Œª S ‚Ü¶ ‚ü®‚ãÉ‚ÇÄ (Opens.carrier '' S), isOpen_sUnion (Œª _ ‚ü®i, hi‚ü© ‚Ü¶ hi.2 ‚ñ∏ i.2)‚ü©‚ü©

-- Presheafs are naturally of sets, and the concept of a sheaf of rings is handled elsewhere (in the notion of a ringed space).
def myPresheaf (X : Type u) [TopologicalSpace X] := (Opens X)·µí·µñ ‚•§ Type u

namespace myPresheaf

/-- `‚Ñ±.sect U` is the type of sections of `U`. -/
abbrev sect {X : Type u} [TopologicalSpace X] (‚Ñ± : myPresheaf X) (U : Opens X) := ‚Ñ±.obj ‚ü®U‚ü©

/-- `‚Ñ±.res s huv` is the restriction of the section `s : ‚Ñ±.sect U` to `‚Ñ±.sect V`, where `huv` is a proof that `V ‚â§ U`. -/
abbrev res {X : Type u} [TopologicalSpace X] {‚Ñ± : myPresheaf X} {U V : Opens X} (s : sect ‚Ñ± U) (huv : V ‚â§ U) := ‚Ñ±.map (homOfLE huv).op s

variable {X : Type u} [TopologicalSpace X] {‚Ñ± : myPresheaf X}

theorem res_comp {U V W : Opens X} (s : sect ‚Ñ± U) (huv : V ‚â§ U) (hvw : W ‚â§ V) : res (res s huv) hvw = res s (le_trans hvw huv) := by
  have : (‚Ñ±.map (homOfLE hvw).op) ((‚Ñ±.map (homOfLE huv).op) s) = ‚Ñ±.map ((homOfLE huv).op ‚â´ (homOfLE hvw).op) s
  rw [‚Ñ±.map_comp]; rfl
  simp_rw [res, this]; rfl

-- theorem res_zero {U V : Opens X} (huv : V ‚â§ U) : res (0 : sect ‚Ñ± U) huv = 0 := by
--   rw [res, map_zero]

-- theorem res_add {U V : Opens X} (s t : sect ‚Ñ± U) (huv : V ‚â§ U) : res (s + t) huv = (res s huv) + (res t huv) := by
--   rw [res, map_add]

-- theorem res_sub {U V : Opens X} (s t : sect ‚Ñ± U) (huv : V ‚â§ U) : res (s - t) huv = (res s huv) - (res t huv) := by
--   rw [res, map_sub]

-- theorem res_mul {U V : Opens X} (s t : sect ‚Ñ± U) (huv : V ‚â§ U) : res (s*t) huv = (res s huv) * (res t huv) := by
--   rw [res, map_mul]

theorem inf_le_left {U V : Opens X} : U ‚äì V ‚â§ U := inter_subset_left
theorem inf_le_right {U V : Opens X} : U ‚äì V ‚â§ V := inter_subset_right
-- A terribly inefficient proof that I don't care to update
theorem le_iSup {Œπ : Type} {U : Œπ ‚Üí Opens X} (i : Œπ) : U i ‚â§ ‚®Ü j, U j := by
  intro x hx
  use (U i).carrier
  constructor
  rw [mem_image]
  use U i
  constructor
  use i
  rfl
  exact hx

universe v

def Compatible {Œπ : Type v} {U : Œπ ‚Üí Opens X} (s : (i : Œπ) ‚Üí sect ‚Ñ± (U i)) := ‚àÄ i j, res (s i) inf_le_left = res (s j) inf_le_right

theorem compatible_of_res {Œπ : Type v} {U : Œπ ‚Üí Opens X} (s : sect ‚Ñ± (‚®Ü j, U j)) : Compatible (Œª i ‚Ü¶ res s (le_iSup i)) := by
  intro i j
  simp_rw [res_comp]

-- Tara's other idea
class IsSheaf (‚Ñ± : myPresheaf X) : Prop where
  glueing' : ‚àÄ {Œπ : Type v} {U : Œπ ‚Üí Opens X} (s : (i : Œπ) ‚Üí sect ‚Ñ± (U i)) (hs : Compatible s), ‚àÉ! s', ‚àÄi, res s' (le_iSup i) = s i

class IsSeparated (‚Ñ± : myPresheaf X) : Prop where
  locality' : ‚àÄ {Œπ : Type v} {U : Œπ ‚Üí Opens X} (s t : ‚Ñ±.sect (‚®Ü i, U i)) (hi : ‚àÄi : Œπ, res s (le_iSup i) = res t (le_iSup i)), s = t

class IsGlueable (‚Ñ± : myPresheaf X) : Prop where
  glueing' : ‚àÄ {Œπ : Type v} {U : Œπ ‚Üí Opens X} {s : (i : Œπ) ‚Üí sect ‚Ñ± (U i)} (hs : Compatible s), ‚àÉ s', ‚àÄi, res s' (le_iSup i) = s i

#check Over

-- example : IsSheaf ‚Ñ± ‚Üî IsSeparated ‚Ñ± ‚àß IsGlueable ‚Ñ± := by
--   constructor <;> intro hf
--   constructor <;> constructor
--   intro Œπ U s t hi
--   let r := hf.glueing' (Œª i ‚Ü¶ ‚Ñ±.res s (@le_iSup _ _ U i))

-- theorem glueing {‚Ñ± : myPresheaf X} [inst : IsSheaf ‚Ñ±] : ‚àÄ {Œπ : Type _} {U : Œπ ‚Üí Opens X} {s : (i : Œπ) ‚Üí sect ‚Ñ± (U i)}, (hs : Compatible s) ‚Üí ‚àÉ! s', ‚àÄi, res s' (le_iSup i) = s i := IsSheaf.glueing'

-- def locality

-- variable {ùí™ : myPresheaf X} [inst : IsSheaf ùí™]

-- theorem locality_zero {Œπ : Type _} {U : Œπ ‚Üí Opens X} (s : sect ùí™ (‚®Ü i, U i)) (hs : ‚àÄi, res s (le_iSup i) = 0) : s = 0 := by
--   let ‚ü®t', ht'‚ü© := glueing (compatible_of_res s)
--   have : s = t'
--   apply ht'.2
--   intro i; rfl
--   rw [this]
--   have : 0 = t'
--   apply ht'.2
--   intro i
--   rw [res_zero, hs]
--   exact this.symm

-- theorem locality {Œπ : Type _} {U : Œπ ‚Üí Opens X} (s t : sect ùí™ (‚®Ü i, U i)) (hs : ‚àÄi, res s (le_iSup i) = res t (le_iSup i)) : s = t := by
--   have : ‚àÄi, res (s - t) (le_iSup i) = 0
--   intro i
--   rw [res_sub, sub_eq_zero]
--   exact hs i
--   have h : s - t = 0 := @locality_zero _ _ _ inst _ _ (s-t) this
--   rw [‚Üê sub_eq_zero]
--   exact h
